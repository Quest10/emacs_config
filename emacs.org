
* Error "markdown failed with exit code 127"
  Se instala el modo markdown-mode. Para que funcione la previsualización hay que instalar markdown
#+BEGIN_SRC 
brew install markdown
#+END_SRC

Inmediatamente tras instalar no surte efecto.

** Referencia https://stackoverflow.com/questions/50452924/markdown-preview-in-emacs-fails-pandoc-error-127
* Lista de ideas
** TODO Mapear tecla rápida para abrir/cerrar shell
   Se abrirá en la parte inferior a 1/3 de la ventana (aprox).
   - ¿Cómo se mapea?
   - ¿Qué shell usar? eshell parece la más interesante pero no carga el perfil de bash. ¿Alguna forma de cargarlo?
   - ¿Cómo respetar la proporción de ventanas? ¿Se pueden guardar "diseños" de ventanas?
** DONE Mapear tecla rápida para abrir/cerrar ventana de dired

#+BEGIN_SRC lisp
(global-set-key (kbd "<f3>") 'dired-sidebar-toggle-sidebar)
#+END_SRC   
* Programación literada

  Un poco de documentación en el inicio del archivo de carga. El enfoque literado sobre un archivo permite documentar mejor no sólo las funcionalidades sino el curso de los pensamientos del desarrollo. En este caso se parte de una copia de un archivo de configuración de emacs funcional. El objetivo es crear un archivo de org-mode que genere un archivo de configuración de emacs.

#+BEGIN_SRC lisp

;;Configuración de Emacs para Mac
;;Gerardo Diez García
;;2018-2019
;;Fuentes: https://github.com/cmacrae/.emacs.d/


;;TODO List
;;Programación literada
;;Implementación de descarga e instalación de los paquetes si no están instalados (fonts hay que descargarlos a mano)
;;

#+END_SRC
  Con una programación funcional basada en archivos de Org-Mode se pueden manejar mejor de manera más inteligente las tareas por hacer (TODO) ya que permite el resaltado de palabras clave configurables.
  Esta programación no debiera evitar los comentarios ya que la idea es generar un archivo completo en lisp. Cosas erroneas que han de cambiarse en la cabecera (y resto del código):

  - Comentarios en castellano: Adopto la tesis de @adirael la documentación del código y los commits debieran estar en inglés
  - Todo es mejor con una licencia: Deja claro en los términos en los que se va a poder reutilizar el código. Se elige la lícencia MIT por simplicidad y la libertad que da. Elección gracias a https://choosealicense.com/
  
  La configuración inicial hace un uso intensivo de la configuración empleada por [[ https://github.com/cmacrae/.emacs.d/][MacRae]]
* Uso de paquetes

  Como todo gran sistema operativo, Emacs ha desarrollado desde las últimas versiones un sistema de paquetes que permite la instalación de extensiones desarrolladas por la comunidad

#+BEGIN_SRC lisp 

;;Prólogo cargador de paquetes básicos macrae
(require 'package)
(setq package-enable-at-startup nil)
(unless (assoc-default "melpa" package-archives)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t))
(package-initialize)

;; Bootstrap use-package
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
(package-install 'use-package))

#+END_SRC

* Estilo visual

#+BEGIN_SRC lisp

;; inhibición de la pantalla de inicio
(setq inhibit-startup-screen t)
;; permite usar el alt - derecho de manera estandar
(setq mac-right-option-modifier nil)
;; deshabilita la barra de iconos
(tool-bar-mode -1)
;; abre todos los archivos en un mismo frame
(setq ns-pop-up-frames nil)
;; ajuste de línea
(global-visual-line-mode 1)


;; algo de estilo con colores por defecto
;;(load-theme 'misterioso)


;; carga de temas macrae
(use-package doom-themes
  :after (spaceline)
  :init
  (setq
      doom-themes-enable-bold t
      doom-themes-enable-italic t
      doom-one-brighter-comments t
      doom-neotree-file-icons t)
  (load-theme 'doom-one t)
  :config
  (doom-themes-neotree-config))

;; spaceline macrae
(use-package spaceline
  :init
  (require 'spaceline-config)
  (spaceline-emacs-theme))


;; comentado hasta que se solucione bug: https://github.com/domtronn/spaceline-all-the-icons.el/issues/100
;; (use-package spaceline-all-the-icons
;;   :after spaceline
;;   :config
;;   (spaceline-all-the-icons-theme)
;;   (spaceline-all-the-icons--setup-git-ahead)
;;   (spaceline-toggle-all-the-icons-buffer-size-off)
;;   (spaceline-toggle-all-the-icons-hud-off)
;;   (spaceline-toggle-all-the-icons-vc-icon-off)
;;   (setq spaceline-all-the-icons-separator-type 'wave))



;; iconitos (macrae)
(use-package all-the-icons
  :init
  (cond
   ((string-equal system-type "gnu/linux")
    (if (not
      (file-exists-p (concat (getenv "XDG_DATA_HOME") "/fonts/all-the-icons.ttf")))
      (all-the-icons-install-fonts "t")))
   ((string-equal system-type "darwin")
     (if (not
      (file-exists-p (concat (getenv "HOME") "/Library/Fonts/all-the-icons.ttf")))
      (all-the-icons-install-fonts "t")))))

(use-package all-the-icons-dired
  :hook
  (dired-mode . all-the-icons-dired-mode))

#+END_SRC

* Comportamiento como editor

#+BEGIN_SRC lisp

;; sobreescritura de la region seleccionada
(delete-selection-mode 1)

;; resaltar parentesis emparejados
(show-paren-mode 1)


;; guias de indentacion (macrae)
(use-package indent-guide
  :config
  (indent-guide-global-mode))

;; salvado del historial de comandos del minibuffer
(savehist-mode 1)


;; sidebar para dired
(use-package dired-sidebar
  :ensure t
  :commands (dired-sidebar-toggle-sidebar))

(global-set-key (kbd "<f3>") 'dired-sidebar-toggle-sidebar)

;; recuperación entre arranques
(desktop-save-mode 1)


;; ajustes de backups (files~)
(setq
   backup-by-copying t
   backup-directory-alist
    '(("." . "~/Documents/bck-files/"))
   delete-old-versions t
   kept-new-versions 6
   kept-old-versions 2
   version-control t)

;; ajustes de autoguardados (#files#)
(setq
   auto-save-file-name-transforms
   `((".*", "~/Documents/bck-files/" t)))

#+END_SRC

* Trabajando con marcadores
  Emacs permite, de serie, recordar el punto exacto en el que se está trabajando en un archivo e incluso asignarle un nombre con: C-x r m {nombre_del_marcador} <RET>
  Al hacer referencia al punto concreto del documento en el que se guarda el marcador, se pueden tener distintos marcadores del mismo archivo, siempre que no se llamen igual. Si se llaman igual el último con ese nombre sobreescribirá al anterior. Para evitarlo se ha de usar: C-x r M {nombre_del_marcador} <RET>
  Atajos de teclado para trabajar con marcadores:
| Atajo                               | Funcionalidad                        |
|-------------------------------------+--------------------------------------|
| C-x r m {nombre_del_marcador} <RET> | Guarda el marcador                   |
| C-x r M {nombre_del_marcador} <RET> | Guarda el marcador sin sobreescribir |
| C-x r b {nombre_del_marcador} <RET> | Salta al marcador con ese nombre     |
| C-x r l                             | Lista todos los marcadores           |

  Por defecto los marcadores se deben de guardar manualmente (M-x bookmark-save). En nuestro caso se establece un archivo para guardar los marcadores por defecto, y que estos se guarden con cada nueva variación.
  
#+BEGIN_SRC lisp
;; Set default bookmark file and auto-saving
(setq bookmark-default-file "~/.emacs.d/bookmarks")
(setq bookmark-save-flag 1)
#+END_SRC

  Al arrancar puede ser útil ver un listado de los marcadores guardados. Se abre esta lista mediante la siguiente configuración extraida de [[http://ergoemacs.org/emacs/bookmark.html][Xah Lee]]:
#+BEGIN_SRC lisp
(require 'bookmark)
(bookmark-bmenu-list)
(switch-to-buffer "*Bookmark List*")
#+END_SRC 
** TODO estudiar la utilidad de funcionalidades extra ofrecidas por bookmark-plus
* Paquetes exóticos
  Aún por comprobar su funcionamiento (y utilidad)
** Docker

#+BEGIN_SRC lisp
;; DOCKER (macrae)
(use-package dockerfile-mode
  :mode "\\Dockerfile\\'")

(use-package docker-tramp)
(use-package docker
  :bind ("C-c d" . hydra-docker/body)
  :config
  (defhydra hydra-docker (:columns 5 :color blue)
    "Docker"
    ("c" docker-containers "Containers")
    ("v" docker-volumes "Volumes")
    ("i" docker-images "Images")
    ("n" docker-networks "Networks")
    ("b" dockerfile-build-buffer "Build Buffer")
    ("q" nil "Quit")))


#+END_SRC
** K8S

#+BEGIN_SRC lisp

;; K8S (macrae)
(use-package kubernetes
  :bind ("C-c k" . hydra-kube/body)
  :commands (kubernetes-overview)
  :config
  (defhydra hydra-kube (:columns 5 :color blue)
    "Kubernetes"
    ("o" kubernetes-overview "Overview")
    ("c" kubernetes-config-popup "Config")
    ("e" kubernetes-exec-popup "Exec")
    ("l" kubernetes-logs-popup "Logs")
    ("L" kubernetes-labels-popup "Labels")
    ("d" kubernetes-describe-popup "Describe")))

#+END_SRC

* OrgMode

#+BEGIN_SRC lisp 

;; ORG MODE
(eval-after-load 'org
'(progn
(add-to-list 'org-structure-template-alist
             '("P" "#+TITLE:\n#+OPTIONS: toc:nil\n#+TAGS:\n\n? "))))


;; ajustes estados TODO list
(setq org-todo-keywords
  '(
(sequence "TODO" "DOING" "|" "TRANSFERED" "POSTPONED" "DONE" "CANCELED")
;;(sequence "SENT" "APPROVED" "|" "PAID")
))

#+END_SRC

* Variables de personalizadas controladas por Emacs

#+BEGIN_SRC lisp
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(org-agenda-files (quote ("~/Documents/TODO List.org")))
 '(package-selected-packages
   (quote
    (markdown-mode magit indent-guide all-the-icons-dired docker-tramp dockerfile-mode yaml-mode doom-themes spaceline-all-the-icons use-package))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
#+END_SRC
