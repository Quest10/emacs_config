
#+PROPERTY: header-args :tangle ./init.el
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="rethink.css" />
#+OPTIONS: toc:nil num:nil html-style:nil

* Programación literada

  Un poco de documentación en el inicio del archivo de carga. El enfoque literado sobre un archivo permite documentar mejor no sólo las funcionalidades sino el curso de los pensamientos del desarrollo. En este caso se parte de una copia de un archivo de configuración de emacs funcional. El objetivo es crear un archivo de org-mode que encapsule un archivo de configuración de emacs. La configuración inicial hace un uso intensivo, aunque no exclusivo, de la configuración empleada por [[ https://github.com/cmacrae/.emacs.d/][MacRae]]. Para la carga de esta configuración existen dos opciones:
  - Generar un archivo de inicio mínimo que haga la carga de los bloques de código de otros archivos de Org como el del ejemplo (extraído de la configuración de [[https://github.com/seth/my-emacs-dot-d][Seth]]):
#+BEGIN_EXAMPLE
(org-babel-load-file
(expand-file-name "example-emacs-init.org"
                 user-emacs-directory))
#+END_EXAMPLE
  - Generar uno o varios archivos de configuración de código lisp a partir de los fragmentos de código presentes en el código.
   
  La primera opción funciona a partir de la versión 24 de Emacs, porque trae ya incluido Org Mode. Prefiero evitar esta opción porque genera una dispersión innecesaria de los archivos de configuración (al menos se necesitan 2 archivos) y uno queda fuera del sistema de documentación de Org. Además la interpretación al vuelo por parte de OrgMode de los fragmentos de código exige que este, OrgMode, se cargue al inicio del archivo de configuración. Esto "rompe" en cierta manera la lógica de la configuración a la hora de documentarla.
  La segunda opción hace uso de la opción de "tangle" de OrgMode. Esta opción permite mediante la ejecución de "org-babel-tangle" la exportación de los trozos de códigos presentes en el texto a un archivo del lenguaje al que pertenece el lenguaje. Por defecto creará un archivo, en el mismo directorio,con el mismo nombre del archivo org, cambiando la extensión a la del lenguaje. Para generar un archivo con un nombre y directorio concretos se deberá crear una cabecera como la del ejemplo:
#+BEGIN_EXAMPLE
#+PROPERTY: header-args :tangle ~/.emacs.d/init_test.el
#+END_EXAMPLE
  Esta cabecera tendrá efecto sobre todos los fragmentos del código salvo los que expresamente se excluyan como:
#+BEGIN_EXAMPLE
#+HEADER: :tangle no
#+BEGIN_SRC emacs-lisp
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(org-agenda-files (quote ("~/Documents/TODO List.org")))
 '(package-selected-packages
   (quote
    (markdown-mode magit indent-guide all-the-icons-dired docker-tramp dockerfile-mode yaml-mode doom-themes spaceline-all-the-icons use-package))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
#+END_SRC
#+END_EXAMPLE
  En caso de que la cabecera general cambie (apuntando a otro archivo) habrá que poner el cursor sobre dicha cabecera y ejecutar C-c C-c para refrescar el setup local. De otra manera OrgMode cacheará las preferencias y seguirá generando el archivo original.
  En un futuro se puede optar por distribuir el código en distintos fragmentos. Se puede seleccionar el destino de los distintos fragmentos cambiando la cabecera con el nombre del archivo de destino, como por ejemplo:
#+BEGIN_EXAMPLE
#+HEADER: :tangle ~/.emacs.d/custom.el
#+BEGIN_SRC emacs-lisp
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(org-agenda-files (quote ("~/Documents/TODO List.org")))
 '(package-selected-packages
   (quote
    (markdown-mode magit indent-guide all-the-icons-dired docker-tramp dockerfile-mode yaml-mode doom-themes spaceline-all-the-icons use-package))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
#+END_SRC
#+END_EXAMPLE

  Con una programación literada basada en archivos de Org-Mode se pueden manejar mejor de manera más inteligente las tareas por hacer (TODO) ya que:
  - permite el resaltado de palabras clave configurables, asignándolas a tareas o puntos concretos.
  - la documentación puede extenderse con enlaces, tablas (para presentar atajos de teclado, por ejemplo) sin la necesidad de comentar la región. Por esto la documentación puede ser mucho más extensa de manera natural, pudiendo incluir no sólo las razones por las que se elige una documentación u otra, sino crear una especie de manual de la configuración (y de Emacs)
  - se puede ir comprobando la valided del código antes de exportarlo al archivo final evaluando los fragmentos de manera individual
  
  Esta programación no debiera evitar los comentarios ya que la idea es generar un archivo completo en lisp. Cosas erroneas que han de cambiarse en la cabecera (y resto del código):

  - Comentarios en castellano: Adopto la tesis de @adirael la documentación del código y los commits debieran estar en inglés
  - Todo es mejor con una licencia: Deja claro en los términos en los que se va a poder reutilizar el código. Se elige la lícencia MIT por simplicidad y la libertad que da. Elección gracias a https://choosealicense.com/
  


#+BEGIN_SRC emacs-lisp

;;Personal configuration for Emacs
;;Gerardo Diez García
;;2018-2020

#+END_SRC

* Estableciendo la verbosidad del arranque
  Por defecto Emacs establece el nivel de warning a la hora del arranque. Por eso se pueden confundir los [[https://github.com/Quest10/emacs_config/issues/1#issue-580735051][warnings con errores]]. Como workaround se establece el [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Warning-Basics.html][nivel]] a error
#+BEGIN_SRC emacs-lisp
(setq warning-minimum-level :error)
#+END_SRC 
* Uso de paquetes

  Como todo gran sistema operativo, Emacs ha desarrollado desde las últimas versiones un sistema de paquetes que permite la instalación de extensiones desarrolladas por la comunidad. Apoyándose en las funcionalidades ofrecidas por esta gestión nativa de paquetes se ha creado el paquete "[[https://github.com/jwiegley/use-package][use-package]]".
  Empleando "use-package" nos aseguraremos que un paquete está instalado (o que este se instala durante la carga de la configuración) mediante:
#+BEGIN_EXAMPLE emacs-lisp
(use-package {nombre_del_paquete}
  :ensure t
)
#+END_EXAMPLE
  Otros puntos interesantes son: declaración de condiciones con "if:"; enlazar atajos de teclado mediante "bind:"; establecer la configuración para un paquete con "config:"; e incluso, en las últimas versiones, permite asegurar la presencia en el sistema de otros binarios. Para una visión más amplia de las posibilidades de este paquete conviene visitar la [[https://github.com/jwiegley/use-package][página de GitHub del proyecto]].

#+BEGIN_SRC emacs-lisp 

;; Init use of package
(require 'package)
(package-initialize)


;; Add another repos, so we can install use-package
(unless (assoc-default "melpa" package-archives)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t))

;; Bootstrap use-package
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

;; Ensure always the use of "use-package"
(require 'use-package)
(setq use-package-always-ensure t)
(setq package-enable-at-startup nil)

#+END_SRC

* Estilo visual

#+BEGIN_SRC emacs-lisp 

  ;; inhibición de la pantalla de inicio
  (setq inhibit-startup-screen t)
  ;; permite usar el alt - derecho de manera estandar
  (setq mac-right-option-modifier nil)
  ;; deshabilita la barra de iconos
  (tool-bar-mode -1)
  ;; abre todos los archivos en un mismo frame
  (setq ns-pop-up-frames nil)
  ;; ajuste de línea
  (global-visual-line-mode 1)


  ;; algo de estilo con colores por defecto
  ;;(load-theme 'misterioso)


  ;; carga de temas macrae
  (use-package doom-themes
    :ensure t
    :after (spaceline)
    :init
    (setq
	doom-themes-enable-bold t
	doom-themes-enable-italic t
	doom-one-brighter-comments t
	doom-neotree-file-icons t)
    (load-theme 'doom-one t)
    :config
    (doom-themes-neotree-config))

  ;; spaceline macrae
  (use-package spaceline
    :ensure t
    :init
    (require 'spaceline-config)
    (spaceline-emacs-theme))


  (use-package spaceline-all-the-icons
    :ensure t
    :after spaceline
    :config
    (spaceline-all-the-icons-theme)
    (spaceline-all-the-icons--setup-git-ahead)
    (spaceline-toggle-all-the-icons-buffer-size-off)
    (spaceline-toggle-all-the-icons-hud-off)
    (spaceline-toggle-all-the-icons-vc-icon-off)
    (setq spaceline-all-the-icons-separator-type 'wave))



  ;; iconitos (macrae)
  (use-package all-the-icons
    :ensure t
    :init
    (cond
     ((string-equal system-type "gnu/linux")
      (if (not
	(file-exists-p (concat (getenv "HOME") "/.fonts/all-the-icons.ttf")))
	(all-the-icons-install-fonts "t")))
     ((string-equal system-type "darwin")
       (if (not
	(file-exists-p (concat (getenv "HOME") "/Library/Fonts/all-the-icons.ttf")))
	(all-the-icons-install-fonts "t")))))

  (use-package all-the-icons-dired
    :ensure t
    :hook
    (dired-mode . all-the-icons-dired-mode))

#+END_SRC

* Comportamiento como editor

#+BEGIN_SRC emacs-lisp 

;; sobreescritura de la region seleccionada
(delete-selection-mode 1)

;; resaltar parentesis emparejados
(show-paren-mode 1)


;; guias de indentacion (macrae)
(use-package indent-guide
  :ensure t
  :config
  (indent-guide-global-mode))

;; salvado del historial de comandos del minibuffer
(savehist-mode 1)


;; sidebar para dired
(use-package dired-sidebar
  :ensure t
  :commands (dired-sidebar-toggle-sidebar)
  :bind (("<f3>" . dired-sidebar-toggle-sidebar)))

;; (global-set-key (kbd "<f3>") 'dired-sidebar-toggle-sidebar)

;; recuperación entre arranques
(desktop-save-mode 1)


;; ajustes de backups (files~)
(setq
   backup-by-copying t
   backup-directory-alist
    '(("." . "~/.emacs.d/bck-files/"))
   delete-old-versions t
   kept-new-versions 6
   kept-old-versions 2
   version-control t)

;; ajustes de autoguardados (#files#)
(setq
   auto-save-file-name-transforms
   `((".*", "~/.emacs.d/bck-files/" t)))

#+END_SRC

* Trabajando con marcadores
  Emacs permite, de serie, recordar el punto exacto en el que se está trabajando en un archivo e incluso asignarle un nombre con: C-x r m {nombre_del_marcador} <RET>
  Al hacer referencia al punto concreto del documento en el que se guarda el marcador, se pueden tener distintos marcadores del mismo archivo, siempre que no se llamen igual. Si se llaman igual el último con ese nombre sobreescribirá al anterior. Para evitarlo se ha de usar: C-x r M {nombre_del_marcador} <RET>
  Atajos de teclado para trabajar con marcadores:
| Atajo                               | Funcionalidad                        |
|-------------------------------------+--------------------------------------|
| C-x r m {nombre_del_marcador} <RET> | Guarda el marcador                   |
| C-x r M {nombre_del_marcador} <RET> | Guarda el marcador sin sobreescribir |
| C-x r b {nombre_del_marcador} <RET> | Salta al marcador con ese nombre     |
| C-x r l                             | Lista todos los marcadores           |

  Por defecto los marcadores se deben de guardar manualmente (M-x bookmark-save). En nuestro caso se establece un archivo para guardar los marcadores por defecto, y que estos se guarden con cada nueva variación.
  
#+BEGIN_SRC emacs-lisp 
;; Set default bookmark file and auto-saving
(setq bookmark-default-file "~/.emacs.d/bookmarks")
(setq bookmark-save-flag 1)
#+END_SRC

  Al arrancar puede ser útil ver un listado de los marcadores guardados. Se abre esta lista mediante la siguiente configuración extraida de [[http://ergoemacs.org/emacs/bookmark.html][Xah Lee]]:
#+BEGIN_SRC emacs-lisp 
(require 'bookmark)
(bookmark-bmenu-list)
(switch-to-buffer "*Bookmark List*")
#+END_SRC 
** TODO estudiar la utilidad de funcionalidades extra ofrecidas por bookmark-plus

* OrgMode

#+BEGIN_SRC emacs-lisp
;; ORG MODE
(eval-after-load 'org
'(progn
(add-to-list 'org-structure-template-alist
             '("P" "#+TITLE:\n#+OPTIONS: toc:nil\n#+TAGS:\n\n? "))))

	     
;; ajustes estados TODO list
(setq org-todo-keywords
  '(
(sequence "TODO" "DOING" "|" "TRANSFERED" "POSTPONED" "DONE" "CANCELED")
;;(sequence "SENT" "APPROVED" "|" "PAID")
))

#+END_SRC

** Ejecución de código: Babel
   OrgMode mediante Babel permite interpretar distintos [[https://orgmode.org/worg/org-contrib/babel/languages.html][lenguajes]]. Algunos lenguajes, como el propio emacs-lisp, vienen habilitados por defecto y no requieren de dependencias adicionales. Para habilitar otros lenguajes se incluye el siguiente código (y se revisan las dependencias que tiene cada lenguaje para su ejecución)
*** Trabajando con Javascript
    JavaScript se ejecuta mediante Node. Al evaluar un bloque de JavaScript lanza un error al tratar de emplear node ya que no lo encuentra en el path. Este parece un error conocido de Emacs en OSx. El paquete exec-path-from-shell corrige el problema
**** DOING fix missing variables
     Hace uso de un paquete: exec-path-from-shell.
     - [X] Ejecutarlo para que se instale sólo si no lo hace
     - [ ] El reimportado de las variables de entorno podría impactar (¿positivamente?) en otras modos (¿eshell?) ¿Es mejor situar esta carga en otra posición?
     - [X] Documentarlo
Source: 
- http://chopmo.dk/2017/08/01/fixing-macos-emacs-path.html
- https://github.com/purcell/exec-path-from-shell
- https://emacs.stackexchange.com/questions/30397/package-exec-path-from-shell-isnt-setting-path-variables-from-zshenv-on-ma

 #+BEGIN_SRC emacs-lisp
 ;; inherit shell variables correctly
 ;; now we can load node fine
 (use-package exec-path-from-shell
   :ensure t
   :if (memq window-system '(mac ns x))
   :config
   (exec-path-from-shell-initialize))

 ;; active Babel languages
 (org-babel-do-load-languages
  'org-babel-load-languages
  '(
  (awk . t)
  (C . t)
  (ditaa . t)
  (emacs-lisp . t)
  (dot . t)
  (js . t)
  (python . t)
  (shell . t)
  (sql . t)
  (sqlite . t)
  )
  )
 #+END_SRC
* Trabajando con lenguajes
  Un comprobador sintáctico ahorra muchos lenguajes. Emacs trae integrado Flymake. Los lenguajes que más uso (YAML, Terraform ...) están soportados por [[https://www.flycheck.org/en/latest/languages.html#flycheck-languages][Flymcheck]] Este descarga la responsabilidad de los chequeos en linterns externos que han de ser instalados adicionalmente.

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :defer 2
  :diminish
  :init (global-flycheck-mode)
  :custom
  (flycheck-display-errors-delay .3)
)
#+END_SRC
** YAML
   Para tener resaltado sintactico hacemos uso de yaml-mode que al no venir de serie deberemos hacer uso de use-package
#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :ensure t
)
#+END_SRC
   Uno de los errores más típicos trabajando con yaml es el empleo de tabuladores en vez de espacio. Con este modo y flycheck habilitados este error queda claramente señalizado con una banda roja representando los tabuladores. Para sustituir estos tabuladores por espacio no hace falta instalar un paquete adicional. Emacs trae la utilidad untabify. Para usarlo sólo debemos seleccionar la región sobre la que queremos operar (C-x h para seleccionar todo el buffer) y ejecutar M-x untabify Este truco lo he encontrado en https://mdk.fr/blog/emacs-replace-tabs-with-spaces.html
* Magit
  Emacs maneja el control de versiones de manera nativa. Sin embargo Magit es muy popular a la hora de manejar repositorios GIT.
#+BEGIN_SRC emacs-lisp 
(use-package magit
  :ensure t
  :bind (("C-x g" . magit-status)))
#+END_SRC
  Para ignorar un archivo modificado únicamente hay que pulsar i en la ventana que muestra los ficheros modificados. Muestra las distintas maneras en las que se puede ignorar un fichero en git
* Autocompletado
** IDO
   Ref: https://www.masteringemacs.org/article/introduction-to-ido-mode
#+BEGIN_SRC emacs-lisp
(use-package ido
  :ensure t
  :config
  (setq ido-enable-flex-matching t)
  (setq ido-everywhere t)
  (ido-mode 1))
#+END_SRC

* Paquetes exóticos
  Aún por comprobar su funcionamiento (y utilidad)
** Docker

#+BEGIN_SRC emacs-lisp 
;; DOCKER (macrae)
(use-package dockerfile-mode
  :ensure t
  :mode "\\Dockerfile\\'")

(use-package docker-tramp
  :ensure t)
(use-package docker
  :ensure t
  :bind ("C-c d" . hydra-docker/body)
  :config
  (defhydra hydra-docker (:columns 5 :color blue)
    "Docker"
    ("c" docker-containers "Containers")
    ("v" docker-volumes "Volumes")
    ("i" docker-images "Images")
    ("n" docker-networks "Networks")
    ("b" dockerfile-build-buffer "Build Buffer")
    ("q" nil "Quit")))


#+END_SRC
** K8S

#+BEGIN_SRC emacs-lisp 

;; K8S (macrae)
(use-package kubernetes
  :ensure t
  :bind ("C-c k" . hydra-kube/body)
  :commands (kubernetes-overview)
  :config
  (defhydra hydra-kube (:columns 5 :color blue)
    "Kubernetes"
    ("o" kubernetes-overview "Overview")
    ("c" kubernetes-config-popup "Config")
    ("e" kubernetes-exec-popup "Exec")
    ("l" kubernetes-logs-popup "Logs")
    ("L" kubernetes-labels-popup "Labels")
    ("d" kubernetes-describe-popup "Describe")))

#+END_SRC
** Markdown
   Se instala el modo markdown-mode. Para que funcione la previsualización tiene que existir markdown en el sistema. En caso de no existir se mostrará el siguiente error.
*** Error "markdown failed with exit code 127"

  #+BEGIN_SRC 
  brew install markdown
  #+END_SRC

  Inmediatamente tras instalar no surte efecto.

**** Referencia https://stackoverflow.com/questions/50452924/markdown-preview-in-emacs-fails-pandoc-error-127
* Lista de ideas
** TODO Mapear tecla rápida para abrir/cerrar shell
   Se abrirá en la parte inferior a 1/3 de la ventana (aprox).
   - ¿Cómo se mapea?
   - ¿Qué shell usar? eshell parece la más interesante pero no carga el perfil de bash. ¿Alguna forma de cargarlo?
   - ¿Cómo respetar la proporción de ventanas? ¿Se pueden guardar "diseños" de ventanas?
** TODO Implementación de descarga e instalación de los paquetes si no están instalados (fonts hay que descargarlos a mano)
** DONE Mapear tecla rápida para abrir/cerrar ventana de dired

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<f3>") 'dired-sidebar-toggle-sidebar)
#+END_SRC   

* Fuentes:
** Configuraciones:
   - [[https://github.com/cmacrae/.emacs.d/][MacRae]]: Configuraciones para Mac y configuración de la apariencia moderna.
   - [[https://github.com/seth/my-emacs-dot-d][Seth]]: Ejemplo de configuración a partir de un init que interpreta el código en un archivo de org. Funciones interesantes como la de [[https://github.com/seth/my-emacs-dot-d/blob/master/emacs-init.org#magic-timestamps-sure-why-not][auto-timestamps]]
* Variables de personalización controladas por Emacs
  Emacs tiene un sistema de personalización mediante menús. Cuando este se usa, Emacs genera al final del archivo de configuración una entrada como la siguiente:
#+HEADER: :tangle no
#+BEGIN_SRC emacs-lisp
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(org-agenda-files (quote ("~/Documents/TODO List.org")))
 '(package-selected-packages
   (quote
    (markdown-mode magit indent-guide all-the-icons-dired docker-tramp dockerfile-mode yaml-mode doom-themes spaceline-all-the-icons use-package))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
#+END_SRC

#+RESULTS:

  Prefiero tener estos ajustes en un archivo diferenciado y que Emacs no toque un archivo que edite yo a mano
#+BEGIN_SRC emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file)
#+END_SRC
  
